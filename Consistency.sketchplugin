// Creates a shared object for the selected layers (cmd control option m)

var doc = context.document;

var layer = selection.firstObject();
var pass = true;
var selectedLayers = selection;


function areOfEqualClass (layers) {
    var baseClass = layers[0].className();
    for (var i = 0; i < layers.count(); i++) {
        if (layers[i].className() != baseClass) {
            return false;
        }
    }
    return true;
}

if (selectedLayers.count() > 1) {
    pass = areOfEqualClass(selectedLayers);
}

if (pass) {
    if(layer) {
        if (!layer.isSymbol()) {
            if (true) {
                if (layer.className() == "MSShapeGroup") {

                    var layerStyle;
                    var selection = selectLayerStyle();
                    var sharedStyles = doc.documentData().layerStyles();
                    var hasSharedStyle = layer.style().sharedObjectID() != null;

                    if (selection){
                        if(selection[0] == 1000) {
                            if (selection[1] == -1) {

                               // create new text style
                               layerStyle = sharedStyles.addSharedStyleWithName_firstInstance(selection[2], layer.style());
                               doc.showMessage("Style created")
                            } else {

                                // apply existing style
                                var index = selection[1];
                                layerStyle = sharedStyles.objects().objectAtIndex(index);
                            }

                            // style all other layers
                            if (!hasSharedStyle) {
                                var result = styleAllLayersBasedOnLayerWithLayerStyle(layer, layerStyle);
                                log(result)
                                doc.showMessage("Style applied to " + result.count() + " instances");
                            } else {
                                // apply self
                                styleLayer(layer, layerStyle);
                                doc.showMessage("Style applied to selected layer");
                            }
                        }
                    } else {
                        var name = getUserInput("New Layer Style");
                        if (name){
                            // create new layer style
                            sharedStyles = doc.documentData().layerStyles();
                            layerStyle = sharedStyles.addSharedStyleWithName_firstInstance(name, layer.style());

                            styleAllLayersBasedOnLayerWithLayerStyle(layer, layerStyle);

                            doc.showMessage("Style created")
                        }
                    }
                } else if (layer.className() == "MSTextLayer") {

                    var textStyle;
                    var textStyles = doc.documentData().layerTextStyles();
                    var referenceStyle = layer.style().textStyle();

                    var hasSharedStyle = layer.style().sharedObjectID() != null;
                    log(hasSharedStyle)

                    var selectIndex = 0;

                    if (textStyles) {
                        // get index
                        for (var i = 0; i < textStyles.objects().count(); i++) {
                            if (layer.style().sharedObjectID() == textStyles.objects().objectAtIndex(i).objectID()) {
                                selectIndex = i;
                            }
                        }
                    }

                    var selection = selectTextStyle(selectIndex);

                    // todo if it has style and create a new one, dont apply
                    if (selection){
                        if (selection[0] == 1000) {
                            if (selection[1] == -1) {
                               // create new text style
                               textStyle = textStyles.addSharedStyleWithName_firstInstance(selection[2], layer.style());
                               doc.showMessage("Added new text style");
                            } else {
                                // apply existing style
                                var index = selection[1];
                                textStyle = textStyles.objects().objectAtIndex(index);
                            }
                            // style all other text layers
                            if (!hasSharedStyle) {
                                var result = styleAllTextLayersBasedOnLayerWithTextStyle(layer, textStyle);
                                doc.showMessage("Style applied to " + result.count() + " instances");
                            } else {
                                // apply self
                                styleLayer(layer, textStyle);
                                doc.showMessage("Style applied to selected layer");
                            }
                        }
                    } else {
                        var name = getUserInput("New Text Style");
                        if (name){

                            // create new text style
                           textStyles = doc.documentData().layerTextStyles()
                           var textStyle = textStyles.addSharedStyleWithName_firstInstance(name, layer.style());

                           styleAllTextLayersBasedOnLayerWithTextStyle(layer, textStyle);

                           doc.showMessage("Style created")
                        }
                    }
                } else if (layer.className() == "MSLayerGroup") {
                    var name = getUserInput("New Symbol");
                    if (name){

                        // get equal layers
                        var layers = getEqualLayers(layer, doc.currentPage().children());

                        // add symbol
                        symbols = doc.documentData().layerSymbols()
                        var symbol = symbols.addSymbolWithName_firstInstance(name, layer);

                        // dump(symbols)
                        for (var i = 0; i < layers.count(); i++) {
                            symbol.registerInstance(layers.objectAtIndex(i));
                            doc.showMessage("Converted " + layers.count() + " layers to symbols.")
                        }
                    }
                }
            } else {
                doc.showMessage("Can’t add another style to this layer.")
            }
        } else {
            // get the symbols name
            var symbolName = doc.documentData().layerSymbols().symbolWithID(layer.sharedObjectID()).name()

            // ask for a new name
            var name = [doc askForUserInput:"Duplicate Symbol as…" initialValue:symbolName]);

            if (name){

                // unlink symbol from group
                layer.unregisterAsSymbolIfNecessary();

                // add the symbol
                symbols = doc.documentData().layerSymbols();
                symbols.addSymbolWithName_firstInstance(name, layer);
            }
            doc.showMessage("Duplicated Symbol");
        }
    }
} else {
    doc.showMessage("Please make sure that you select layers of the same type.");
}

doc.reloadInspector();


function getUserInput(placeholder) {
    var name = [doc askForUserInput:"Consistency" initialValue:placeholder]);
    return name;
}

function createSelect (msg, items, selectedItemIndex){
    selectedItemIndex = selectedItemIndex || 0

    var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)]
    [accessory addItemsWithObjectValues:items]
    [accessory selectItemAtIndex:selectedItemIndex]

    var alert = [[NSAlert alloc] init]
    [alert setMessageText:msg]
    [alert addButtonWithTitle:'OK']
    [alert addButtonWithTitle:'Cancel']
    [alert setAccessoryView:accessory]

    var responseCode = [alert runModal]
    var sel = [accessory indexOfSelectedItem]
    var value = [accessory stringValue]

    return [responseCode, sel, value]
}

function getLayersByTextStyle (textStyle, scope) {
    var predicate = NSPredicate.predicateWithFormat("(style.textStyle != NULL) && (FUNCTION(style.textStyle, 'isEqualForSync:asPartOfSymbol:', %@, nil) == YES)", textStyle);
    // query page layers
    var queryResult = scope.filteredArrayUsingPredicate(predicate);

    return queryResult;
}

function getLayersByLayerStyle (layerStyle, scope) {
    var predicate = NSPredicate.predicateWithFormat("(style.fill != NULL) && (FUNCTION(style.fill, 'isEqualForSync:asPartOfSymbol:', %@, nil) == YES)", layerStyle.fill());
    // query page layers
    var queryResult = scope.filteredArrayUsingPredicate(predicate);

    return queryResult;
}

function getLayersBySize (referenceLayer, scope) {
    var predicate = NSPredicate.predicateWithFormat("(frame != NULL) && frame.width == %@ && frame.height == %@ && className == %@", referenceLayer.frame().width(), referenceLayer.frame().height());
    var queryResult = scope.filteredArrayUsingPredicate(predicate);

    return queryResult;
}

function getEqualLayers (referenceLayer, scope) {
    var predicate = NSPredicate.predicateWithFormat("(FUNCTION(self, 'isEqualForSync:asPartOfSymbol:', %@, nil) == YES)", context.selection[0]);
    var queryResult = scope.filteredArrayUsingPredicate(predicate);
    return queryResult;
}


function styleAll(layers, style) {
    for (var i = 0; i < layers.count(); i++) {
        styleLayer(layers[i], style);
    }
}

function styleLayer(layer, style) {
    layer.setStyle(style.newInstance());
}

function styleAllTextLayersBasedOnLayerWithTextStyle (layer, textStyle) {

    // get all text layers that match the style
    var layers = getLayersByTextStyle(layer.style().textStyle(), doc.currentPage().children());
    styleAll(layers, textStyle);
    return layers;
}

function styleAllLayersBasedOnLayerWithLayerStyle (layer, layerStyle) {

    // get all text layers that match the style
    var layers = getLayersByLayerStyle(layer.style(), doc.currentPage().children());
    styleAll(layers, layerStyle);
    return layers;
}


function selectTextStyle (preselect) {
    var preselect = preselect || 0;
    var textStyles = [];
    var textItems = [];

    var selection;

    var styles = doc.documentData().layerTextStyles().objects();
    if (styles.count() != 0) {
        for (var i = 0; i < styles.count(); i++) {
          var style = styles.objectAtIndex(i);
            textStyles.push({
                "textStyle": style,
                "name": style.name()
            });
            textItems.push(style.name());
        }
        if (textItems) selection = createSelect("Select a text style or create a new one", textItems, preselect);
    } else {
        return;
    }
    return selection;
}

function selectLayerStyle () {
    var layerStyles = [];
    var layerStyleItems = [];

    var selection;

    var styles = doc.documentData().layerStyles().objects();
    if (styles.count() != 0) {
        for (var i = 0; i < styles.count(); i++) {
          var style = styles.objectAtIndex(i);
            layerStyles.push({
                "layerStyle": style,
                "name": style.name()
            });
            layerStyleItems.push(style.name());
        }
        if (layerStyleItems) selection = createSelect("Select a style or create a new one", layerStyleItems, 0);
    } else {
        return;
    }
    return selection;
}

function dump (obj) {
          log("#####################################################################################")
          log("## Dumping object " + obj )
          log("## obj class is: " + [obj className])
          log("#####################################################################################")
          log("obj.properties:")
          log([obj class].mocha().properties())
          log("obj.propertiesWithAncestors:")
          log([obj class].mocha().propertiesWithAncestors())
          log("obj.classMethods:")
          log([obj class].mocha().classMethods())
          log("obj.classMethodsWithAncestors:")
          log([obj class].mocha().classMethodsWithAncestors())
          log("obj.instanceMethods:")
          log([obj class].mocha().instanceMethods())
          log("obj.instanceMethodsWithAncestors:")
          log([obj class].mocha().instanceMethodsWithAncestors())
          log("obj.protocols:")
          log([obj class].mocha().protocols())
          log("obj.protocolsWithAncestors:")
          log([obj class].mocha().protocolsWithAncestors())
          log("obj.treeAsDictionary():")
          log(obj.treeAsDictionary())
      }